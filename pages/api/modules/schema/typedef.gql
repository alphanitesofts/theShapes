# ! Interfaces only work on relationships!
  type User {
    id: ID! @id
    timeStamp: DateTime! @timestamp
    emailId: String!
      @unique
      @authorization(
        validate: [
          {
           when: [BEFORE],
            operations: [READ,UPDATE,DELETE],
             where: { node: { emailId: "$jwt.email" } } }
        ]
      ) 
    
    active: Boolean!
    userName: String
    userType: String
    hasComments: [Comment!]! @relationship(type: "HAS_COMMENT", direction: IN)
    hasProjects: [Project!]! @relationship(type: "HAS_PROJECT", direction: OUT)
  }

  #project scheme
  type Project @authorization(
    validate: [         
                {
        when: [AFTER]
        operations: [UPDATE,DELETE]
        where: { node: { createdBy: { emailId: "$jwt.email" } } }
      }
    ]
  )
    {
    id: ID! @id
    timeStamp: DateTime! @timestamp
    name: String!
    isOpen: Boolean!
    recycleBin: Boolean!
    recentProject: Boolean!
    deletedAT: String!
    description: String 
    createdBy:User! @ relationship (type:"CREATED_BY",direction : OUT)
    usersInProjects: [User!]! @relationship(type: "HAS_PROJECT", direction: IN)
    hasContainsFolder: [Folder!]!
      @relationship(type: "HAS_FOLDER", direction: OUT)
    hasContainsFile: [File!]! @relationship(type: "HAS_FILE", direction: OUT)
    hasSprint: [Sprint!]! @relationship(type: "HAS_SPRINT", direction: IN)
  }


  #epic scheme
  type Folder {
    id: ID! @id
    type: String!
    isOpen: Boolean!
    timeStamp: DateTime @timestamp
    name: String!
    uid: Int!
    createdBy:User! @ relationship (type:"CREATED_BY",direction :OUT)
    hasComments: [Comment!]! @relationship(type: "HAS_COMMENT", direction: IN)
    hasSprint: [Sprint!]! @relationship(type: "HAS_SPRINT", direction: IN)
    hasInfo: Info @relationship(type: "HAS_INFO", direction: IN)
    projectHas: Project @relationship(type: "HAS_FOLDER", direction: IN)
    hasFolder: [Folder!]! @relationship(type: "HAS_FOLDER", direction: OUT)
    hasFile: [File!]! @relationship(type: "HAS_FILE", direction: OUT)
  }

  # story scheme
  type File {
    id: ID! @id
    #parentId: ID! @id 
    timeStamp: DateTime! @timestamp
    type: String!
    name: String!
    uid: Int!
    createdBy:User! @ relationship (type:"CREATED_BY",direction :OUT)
    hasSprint: [Sprint!]! @relationship(type: "HAS_SPRINT", direction: IN)
    hasComments: [Comment!]! @relationship(type: "HAS_FILE", direction: IN)
    hasInfo: Info! @relationship(type: "HAS_INFO", direction: IN)
    hasFlowchart: Flowchart @relationship(type: "HAS_FLOWCHART", direction: OUT)
    folderHas: Folder @relationship(type: "HAS_FILE", direction: IN)
    projectHas: Project @relationship(type: "HAS_FILE", direction: IN)
  }

  type Flowchart {
    name: String!
    hasFile: File @relationship(type: "HAS_FLOWCHART", direction: IN)
    hasNodes: [FlowNode!]! @relationship(type: "HAS_FLOWNODES", direction: OUT)
    hasEdges: [FlowEdge!]! @relationship(type: "HAS_FLOWEDGES", direction: OUT)
  }

  #task scheme
  type FlowNode {
    id: ID! @id
    timeStamp: DateTime! @timestamp
    draggable: Boolean!
    flowchart: String!
    type: String!
    uid: Int!
    createdBy:User! @ relationship (type:"CREATED_BY",direction :OUT)
    flowchartHas:Flowchart @relationship(type: "HAS_FLOWNODES", direction:IN)
    uidHas:Uid @relationship (type:"HAS_UID",direction:OUT)
    status: String
    assignedTo: String
    hasSprint: [Sprint!]! @relationship(type: "HAS_SPRINT", direction: IN)
    hasInfo: Info @relationship(type: "HAS_INFO", direction: IN)
    hasComments: [Comment!]!
      @relationship(type: "HAS_FLOWNODES", direction: OUT)
    hasdataNodedata: NodeData @relationship(type: "HAS_NODE_DATA", direction: OUT)
    haspositionPosition: Position
      @relationship(type: "HAS_POSITION", direction: OUT)
    connectedbyFlowedge: [FlowEdge!]!
      @relationship(type: "NODE_CONNECTED_BY", direction: OUT)
    flowNodeHas: File @relationship(type: "HAS_FILE", direction: IN)
    hasTasks: Tasks @relationship(type: "HAS_TASKS", direction: OUT)
    flowedgeConnectedto: [FlowEdge!]!
      @relationship(type: "NODE_CONNECTED_TO", direction: IN)
  }

  type NodeData {
    label: String!
    shape: String!
    description: String
    hasLinkedTo: LinkedTo @relationship(type: "HAS_LINKED_TO", direction: OUT)
    hasLinkedBy: LinkedBy @relationship(type: "HAS_LINKED_BY", direction: OUT)
    flownodeHasdata: FlowNode @relationship(type: "HAS_NODE_DATA", direction: IN)
  }

  type LinkedTo {
    label: String
    id: ID
    flag: Boolean!
    fileId: String
    hasLinkedTo: NodeData @relationship(type: "HAS_LINKED_TO", direction: IN)
  }
  type LinkedBy {
    label: String
    id: ID
    flag: Boolean!
    fileId: String
    hasLinkedBy: NodeData @relationship(type: "HAS_LINKED_BY", direction: IN)
  }

  type Position {
    name: String!
    x: Float!
    y: Float!
    flownodeHasposition: FlowNode
      @relationship(type: "HAS_POSITION", direction: IN)
  }

  type EdgeData {
    id: ID! @id
    label: String
    pathCSS: String!
    boxCSS: String!
    bidirectional: Boolean!
    flowedgeHasedgedata: FlowEdge
      @relationship(type: "HAS_EDGE_DATA", direction: IN)
  }

  type FlowEdge {
    id: ID! @id
    name: String!
    timeStamp: DateTime! @timestamp
    source: String!
    target: String!
    sourceHandle: String!
    targetHandle: String!
    selected: Boolean!
    # * Connections below
    createdBy:User! @ relationship (type:"CREATED_BY",direction :OUT)
    flownodeConnectedby: FlowNode
      @relationship(type: "NODE_CONNECTED_BY", direction: IN)
    connectedtoFlownode: FlowNode
      @relationship(type: "NODE_CONNECTED_TO", direction: OUT)
    hasedgedataEdgedata: EdgeData
      @relationship(type: "HAS_EDGE_DATA", direction: OUT)
  }

  type Info {
    description: String
    assignedTo: String
    status: String!
    dueDate: String
    sprint: String
  }

  type Sprint {
    id: ID! @id
    timeStamp: DateTime! @timestamp
    name: String!
    startDate: String!
    endDate: String!
    description: String
    #Epics
    folderHas: [Folder!]! @relationship(type: "HAS_SPRINT", direction: OUT)
    #stories
    fileHas: [File!]! @relationship(type: "HAS_SPRINT", direction: OUT)
    #Task
    flownodeHas: [FlowNode!]! @relationship(type: "HAS_SPRINT", direction: OUT)
    #projects
    hasProjects: Project @relationship(type: "HAS_SPRINT", direction: OUT)
  }

  type Comment {
    id: ID! @id
    message: String
    timeStamp: DateTime! @timestamp
    createdBy: User @relationship(type: "CREATED_BY", direction: OUT)
    taskHas: FlowNode @relationship(type: "HAS_COMMENT", direction: OUT)
    storyHas: File @relationship(type: "HAS_COMMENT", direction: OUT)
    epicHas: Folder @relationship(type: "HAS_COMMENT", direction: OUT)
    sprintHas: Sprint @relationship(type: "HAS_COMMENT", direction: OUT)
   # createdAt:DateTime! @timestamp(operations: CREATE)
    #updatedAt:DateTime! @timestamp(operations: UPDATE)
  }

  type Uid {
    id: ID! @id
    uid: Int!
    uidHas:FlowNode @relationship (type:"HAS_UID",direction:IN)
      }

  type Tasks {
    id: ID! @id
    timeStamp: DateTime! @timestamp
    flownodeHastask: FlowNode @relationship(type: "HAS_TASKS", direction: IN)
  }